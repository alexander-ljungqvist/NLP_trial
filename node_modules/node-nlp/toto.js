const { Recognizer } = require('./lib');

async function fill(recognizer) {
  recognizer.nlpManager.addLanguage('en');
  const fromEntity = recognizer.nlpManager.addTrimEntity('fromCity');
  fromEntity.addBetweenCondition('en', 'from', 'to', { skip: ['travel'] });
  fromEntity.addAfterLastCondition('en', 'from', { skip: ['travel'] });
  const toEntity = recognizer.nlpManager.addTrimEntity('toCity');
  toEntity.addBetweenCondition('en', 'to', 'from', { skip: ['travel'] });
  toEntity.addAfterLastCondition('en', 'to', { skip: ['travel'] });
  recognizer.nlpManager.slotManager.addSlot('travel', 'toCity', true, {
    en: 'Where do you want to go?',
  });
  recognizer.nlpManager.slotManager.addSlot('travel', 'fromCity', true, {
    en: 'From where you are traveling?',
  });
  recognizer.nlpManager.slotManager.addSlot('travel', 'date', true, {
    en: 'When do you want to travel?',
  });
  recognizer.nlpManager.addDocument(
    'en',
    'I want to travel from %fromCity% to %toCity% %date%',
    'travel'
  );
  recognizer.nlpManager.addAnswer(
    'en',
    'travel',
    'You want to travel {{ date }} from {{ fromCity }} to {{ toCity }}'
  );
  await recognizer.nlpManager.train();
}

async function main() {
  const recognizer = new Recognizer();
  await fill(recognizer);
  const session = {
    locale: 'en',
    message: {
      address: {
        conversation: {
          id: 'a1b2c3',
        },
      },
      text: 'I want to travel to London',
    },
  };
  const session2 = {
    locale: 'en',
    message: {
      address: {
        conversation: {
          id: 'a1b2c3',
        },
      },
      text: 'Barcelona',
    },
  };
  const session3 = {
    locale: 'en',
    message: {
      address: {
        conversation: {
          id: 'a1b2c3',
        },
      },
      text: 'tomorrow',
    },
  };
  return new Promise(done =>
    recognizer.recognize(session, (err, result) => {
      console.log(result);
      recognizer.recognize(session2, (err2, result2) => {
        console.log(result2);
        recognizer.recognize(session3, (err3, result3) => {
          console.log(result3);
        });
      });
    })
  );
}

main();
